
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "commons-io:commons-io:2.5"
    }
}

group 'com.friskysoft'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'

ext.javaVersion = '1.8'
ext.phantomJsVersion = '2.1.1'

sourceCompatibility = javaVersion

repositories {
    mavenCentral()
    jcenter()
}

project.ext {
    majorVersion = 0
    minorVersion = 0
    patchVersion = 1
    project.setVersion(String.format('%s.%s.%s-SNAPSHOT', majorVersion, minorVersion, patchVersion))
}

def getTimestamp() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
}

dependencies {
    compile 'org.seleniumhq.selenium:selenium-java:[3.11,4.0['
    compile 'io.github.bonigarcia:webdrivermanager:2.+'
    compile 'commons-io:commons-io:2.+'
    testCompile 'org.testng:testng:6.+'
    testCompile 'org.slf4j:slf4j-simple:1.+'
    testCompile 'log4j:log4j:1.+'
}

clean {
    delete 'screenshots'
    delete 'build'
    delete 'out'
}

test {
    useTestNG() {
        parallel 'classes'
        threadCount 5
    }

    testLogging {
        events "PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat = 'full'
    }

    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            println "\nResults: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }
}

wrapper {
    gradleVersion = '4.6'
}

jar {
    manifest {
        attributes(
                "Name": project.name,
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "FriskySoft"
        )
    }
}

uploadArchives {

    def repoUsername = ""
    def repoPassword = ""
    if (project.hasProperty('ossrhUsername')) {
        repoUsername = ossrhUsername
    }
    if (project.hasProperty('ossrhPassword')) {
        repoPassword = ossrhPassword
    }

    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            //repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            //    authentication(userName: ossrhUsername, password: ossrhPassword)
            //}

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: repoUsername, password: repoPassword)
            }

            pom.project {
                name project.name
                packaging 'jar'
                artifactId project.name
                version project.version
                groupId project.group
                description project.name

                url 'https://github.com/friskysoft/friskybrowser'

                scm {
                    url 'https://github.com/friskysoft/friskybrowser'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'hossain'
                        name 'Rafaat Hossain'
                        email 'rafaat123@gmail.com'
                    }
                }
            }
        }
    }
}
