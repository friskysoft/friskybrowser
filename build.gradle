group 'com.friskysoft'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'

project.ext {
    javaVersion = '1.8'
    project.version = '2.0.0'
}

sourceCompatibility = javaVersion

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
}

wrapper {
    gradleVersion = '5.3.1'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile 'org.seleniumhq.selenium:selenium-java:[3.141.59,4.0)'
    compile 'io.github.bonigarcia:webdrivermanager:[3.4.0,4.0)'
    compile 'org.slf4j:slf4j-api:[1.0,1.8)'
    compile 'org.slf4j:slf4j-log4j12:[1.0,1.8)'
    testCompile 'org.testng:testng:[6.14,)'
    testCompile 'org.assertj:assertj-core:[3.10,)'
    testCompile 'ch.qos.logback:logback-core:[1.0,2.0)'
    testCompile 'ch.qos.logback:logback-classic:[1.0,2.0)'
}

clean {
    delete 'screenshots', 'target', 'build', 'out', 'test-output', 'test-results'
}

test {
    useTestNG() {
        options {
            parallel = 'methods'
            threadCount = 4
        }
    }

    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }

    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            println "\nResults: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }
}

tasks.withType(Jar) {
    manifest {
        attributes(
                "Name": project.name,
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "FriskySoft"
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

signing {
    sign configurations.archives
}

uploadArchives {

    dependsOn signArchives

    def repoUsername = ""
    def repoPassword = ""
    def snapshotRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
    def stagingRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    def scmUrl = 'https://github.com/friskysoft/friskybrowser'

    if (project.hasProperty('ossrhUsername')) {
        repoUsername = ossrhUsername
    }

    if (project.hasProperty('ossrhPassword')) {
        repoPassword = ossrhPassword
    }

    doFirst {
        println("Uploading artifacts to maven:")
        println("* snapshot repo: " + snapshotRepoUrl)
        println("* release repo: " + stagingRepoUrl)
        println("* username: " + repoUsername)
        println("* password: " + repoPassword.replaceAll('.', '*'))
        println("* artifacts:")
        configurations.archives.allArtifacts.each { arc ->
            println('-- ' + arc.file)
        }
    }

    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: stagingRepoUrl) {
                authentication(userName: repoUsername, password: repoPassword)
            }

            snapshotRepository(url: snapshotRepoUrl) {
                authentication(userName: repoUsername, password: repoPassword)
            }

            pom.project {
                name project.name
                packaging 'jar'
                artifactId project.name
                version project.version
                groupId project.group
                description project.name

                url scmUrl

                scm {
                    url scmUrl
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'hossain'
                        name 'Rafaat Hossain'
                        email 'rafaat123@gmail.com'
                    }
                }
            }
        }
    }
}
