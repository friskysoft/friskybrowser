group 'com.friskysoft'

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'jacoco'

project.version = '3.0.0-SNAPSHOT'

def oss = project.hasProperty('oss')
def release = project.hasProperty('release')
def releaseVersion = project.version.split("-")[0]
def artifactVersion = release ? releaseVersion : "${releaseVersion}-SNAPSHOT"
def scmUrl = "https://github.com/friskysoft/friskybrowser"
def ossRepoUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : ""
def ossRepoPassword = project.hasProperty('ossrhPassword') ? ossrhPassword : ""
def ossSnapshotRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
def ossReleaseRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
def localReleaseRepoUrl = layout.buildDirectory.dir('repos/releases').get().asFile.path
def localSnapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots').get().asFile.path
def mavenRepo = ""

if (oss) {
    mavenRepo = release ? ossReleaseRepoUrl : ossSnapshotRepoUrl
} else {
    mavenRepo = release ? localReleaseRepoUrl : localSnapshotsRepoUrl
}

ext {
    println("* OSS snapshot repo: " + ossSnapshotRepoUrl)
    println("* OSS release repo: " + ossReleaseRepoUrl)
    println("* OSS username: " + ossRepoUsername)
    println("* OSS password: " + ossRepoPassword.replaceAll('.', '*'))
    println("* Selected upload repo: $mavenRepo")
    println("* Artifact version: $artifactVersion")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '(4.15,5]'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-http-jdk-client', version: '(4.13,5]'
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '(5.5,6]'
    implementation group: 'com.assertthat', name: 'selenium-shutterbug', version: '(1,2]'
    implementation group: 'org.assertj', name: 'assertj-core', version: '(3.24,4]'
    testImplementation group: 'org.testng', name: 'testng', version: '7.8.0'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.11'
}

clean {
    delete 'screenshots', 'target', 'build', 'out', 'test-output', 'test-results', 'video'
}

test {
    systemProperties System.getProperties()
    systemProperties System.getenv()

    useTestNG() {
        options {
            parallel = 'methods'
            threadCount = 4
        }
    }

    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams = false
        exceptionFormat = 'full'
    }

    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            println "\nResults: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }

    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('jacoco')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacoco/html')
    }
}

tasks.withType(Jar).configureEach {
    manifest {
        attributes(
                "Name": project.name,
                "Implementation-Title": project.name,
                "Implementation-Version": artifactVersion,
                "Implementation-Vendor": "FriskySoft"
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

signing {
    sign configurations.archives
}

publish.dependsOn signArchives

publishing {

    println("* Artifacts:")
    configurations.archives.allArtifacts.each { arc ->
        println('  - ' + arc.file)
    }

    if (oss && release) {
        println()
        println("----------------------------------------------")
        println("*** ARTIFACT WILL BE PUSHED TO OSS STAGING ***")
        println("----------------------------------------------")
        println()
    }

    repositories {
        maven {
            url = mavenRepo
            if (oss) {
                credentials {
                    username ossRepoUsername
                    password ossRepoPassword
                }
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = project.name
                description = project.name
                groupId = project.group
                artifactId = project.name
                version = artifactVersion
                packaging = 'jar'
                url = scmUrl

                scm {
                    url = scmUrl
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'hossain'
                        name = 'Rafaat Hossain'
                        email = 'rafaat123@gmail.com'
                    }
                }
            }
        }
    }
}
