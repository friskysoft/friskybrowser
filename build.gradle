
import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.commons.io.FileUtils

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "commons-io:commons-io:2.5"
    }
}


group 'com.friskysoft'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'

ext.javaVersion = '1.8'
ext.phantomJsVersion = '2.1.1'

sourceCompatibility = javaVersion

repositories {
    mavenCentral()
    jcenter()
}

project.ext {
    majorVersion = 0
    minorVersion = 0
    patchVersion = System.getenv('BUILD_NUMBER')

    if (patchVersion == null || patchVersion.isEmpty()) {
        patchVersion = getTimestamp()
    }
    appVersion = String.format('%s.%s.%s-SNAPSHOT', majorVersion, minorVersion, patchVersion)
    project.setVersion(appVersion)
}

def getTimestamp() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
}

dependencies {
    compile 'org.seleniumhq.selenium:selenium-java:3.+'
    testCompile 'org.testng:testng:6.+'
    testCompile 'io.github.bonigarcia:webdrivermanager:1.+'
    testCompile 'org.slf4j:slf4j-simple:1.+'
    testCompile 'log4j:log4j:1.2.17'

}

clean {
    delete 'screenshots'
}

test {
    useTestNG() {
        parallel 'classes'
        threadCount 5
    }

    testLogging {
        events "PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat = 'full'
    }

    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            println "\nResults: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }
}

task updateDrivers(type: Exec) {
    executable = '/bin/bash'
    args = ["scripts/UpdateWebDrivers.sh"]
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

jar {
    manifest {
        attributes("Implementation-Title": "Gradle",
                "Implementation-Version": appVersion)
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://localhost/tmp/mavenrepo/")
            pom.version = appVersion
            pom.artifactId = project.name
            pom.groupId = project.group
        }
    }
}

task downloadPhantomJS {
    def osFilenamePart
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        osFilenamePart = "windows.zip"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        osFilenamePart = "macosx.zip"
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        osFilenamePart = Os.isArch("amd64") ? "linux-x86_64.tar.bz2" : "linux-i686.tar.bz2"
    }

    def filename = "phantomjs-$phantomJsVersion-$osFilenamePart"
    def outputFile = file("$buildDir/webdriver/$filename")
    inputs.property("phantomJsVersion", phantomJsVersion)
    outputs.file(outputFile)

    doLast {
        FileUtils.copyURLToFile(new URL("https://bitbucket.org/ariya/phantomjs/downloads/$filename"), outputFile)
    }
}

task preparePhantomJS(type: Copy) {
    def outputDir = file("$buildDir/webdriver/phantomjs")
    outputs.dir(outputDir)

    def archive = downloadPhantomJS.outputs.files.singleFile

    from(Os.isFamily(Os.FAMILY_MAC) || Os.isFamily(Os.FAMILY_WINDOWS) ? zipTree(archive) : tarTree(archive))
    into(outputDir)
    eachFile { FileCopyDetails fcp ->
        fcp.relativePath = new RelativePath(!fcp.directory, *fcp.relativePath.segments[1..-1])
    }

    def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
    System.setProperty "phantomjs.binary.path", new File(outputDir, phantomJsFilename).absolutePath
    println "phantomjs.binary.path=" + System.getProperty("phantomjs.binary.path")
}

preparePhantomJS.dependsOn "downloadPhantomJS"

tasks.withType(Test) {
    systemProperty "phantomjs.binary.path", System.getProperty("phantomjs.binary.path")
}
